/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ut.apkrepackage;

import com.ut.apkrepackage.util.ApkSignedUtil;
import com.ut.apkrepackage.util.FileSizeComparator;
import com.ut.apkrepackage.util.StringUtil;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FileUtils;
import org.dom4j.DocumentException;

/**
 *
 * @author jianjianhong
 */
public class MainUI extends javax.swing.JFrame {

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
        
        FileFilter apkfilter = new FileNameExtensionFilter("apk file", "apk");
        apkFileChoose.setAcceptAllFileFilterUsed(false);
        apkFileChoose.addChoosableFileFilter(apkfilter);
        
        FileFilter resfilter = new FileNameExtensionFilter("res file", "zip");
        resFileChoose.setAcceptAllFileFilterUsed(false);
        resFileChoose.addChoosableFileFilter(resfilter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        apkFileChoose = new javax.swing.JFileChooser();
        iconChoose = new javax.swing.JFileChooser();
        resFileChoose = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        apkFileEt = new javax.swing.JTextField();
        apkFileBt = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        packageNameEt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        nameEt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        xxxhIconIv = new javax.swing.JLabel();
        mIconIv = new javax.swing.JLabel();
        hIconIv = new javax.swing.JLabel();
        xhIconIv = new javax.swing.JLabel();
        xxhIconIv = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        versionCodeEt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        versionNameEt = new javax.swing.JTextField();
        signedBt = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();
        iconChooseLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        resEt = new javax.swing.JTextField();
        resBt = new javax.swing.JButton();

        apkFileChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apkFileChooseActionPerformed(evt);
            }
        });

        iconChoose.setAcceptAllFileFilterUsed(false);
        iconChoose.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        iconChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iconChooseActionPerformed(evt);
            }
        });

        resFileChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resFileChooseActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("重打包");

        jLabel1.setText("签名APK");

        apkFileBt.setText("选择");
        apkFileBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apkFileBtActionPerformed(evt);
            }
        });

        jLabel2.setText("应用包名");

        jLabel3.setText("应用名称");

        jLabel4.setText("应用图标");

        xxxhIconIv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ut/apkrepackage/image/image1.png"))); // NOI18N
        xxxhIconIv.setText("jLabel5");

        mIconIv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ut/apkrepackage/image/image5.png"))); // NOI18N
        mIconIv.setText("jLabel6");

        hIconIv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ut/apkrepackage/image/image4.png"))); // NOI18N
        hIconIv.setText("jLabel7");

        xhIconIv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ut/apkrepackage/image/image3.png"))); // NOI18N
        xhIconIv.setText("jLabel8");

        xxhIconIv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ut/apkrepackage/image/image2.png"))); // NOI18N
        xxhIconIv.setText("jLabel9");

        jLabel10.setText("版本号");

        jLabel11.setText("版本名称");

        signedBt.setText("签名");
        signedBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signedBtActionPerformed(evt);
            }
        });

        logArea.setColumns(20);
        logArea.setRows(5);
        jScrollPane1.setViewportView(logArea);

        iconChooseLabel.setForeground(new java.awt.Color(255, 102, 102));
        iconChooseLabel.setText("点击选择图标目录");
        iconChooseLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        iconChooseLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconChooseLabelMouseClicked(evt);
            }
        });

        jLabel5.setText("应用配置");

        resEt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resEtActionPerformed(evt);
            }
        });

        resBt.setText("选择");
        resBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameEt)
                            .addComponent(apkFileEt)
                            .addComponent(packageNameEt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(apkFileBt))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(resEt))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(signedBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(versionNameEt)
                                    .addComponent(versionCodeEt, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(resBt))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(iconChooseLabel))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(mIconIv, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(hIconIv, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(xhIconIv, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(xxhIconIv, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(xxxhIconIv, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(apkFileEt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apkFileBt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(packageNameEt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nameEt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(iconChooseLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xxxhIconIv, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xxhIconIv, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xhIconIv, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hIconIv, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mIconIv, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(resEt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resBt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(versionCodeEt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(versionNameEt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(signedBt)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void apkFileBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apkFileBtActionPerformed
        apkFileChoose.showOpenDialog(this);
    }//GEN-LAST:event_apkFileBtActionPerformed

    private void apkFileChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apkFileChooseActionPerformed
        File file = apkFileChoose.getSelectedFile();
        apkFileEt.setText(file.getPath());
    }//GEN-LAST:event_apkFileChooseActionPerformed

    private void iconChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iconChooseActionPerformed
        File file = iconChoose.getSelectedFile();
        if(file.isDirectory()) {
            File[] files = file.listFiles();
            if(files.length != 5) {
                showLogMessage("应用图标数目不正确");
                return;
            }
            
            Arrays.sort(files, new FileSizeComparator());
            
            mIconPath = files[0].getAbsolutePath();
            hIconPath = files[1].getAbsolutePath();
            xhIconPath = files[2].getAbsolutePath();
            xxhIconPath = files[3].getAbsolutePath();
            xxxhIconPath = files[4].getAbsolutePath();
            
            setImageLabel(mIconIv, mIconPath);
            setImageLabel(hIconIv, hIconPath);
            setImageLabel(xhIconIv, xhIconPath);
            setImageLabel(xxhIconIv, xxhIconPath);
            setImageLabel(xxxhIconIv, xxxhIconPath);
            
             
        }else {
            showLogMessage("请选择文件目录");
        }
    }//GEN-LAST:event_iconChooseActionPerformed

    private void iconChooseLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconChooseLabelMouseClicked
        showIconChoose();
    }//GEN-LAST:event_iconChooseLabelMouseClicked

    private void signedBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signedBtActionPerformed
        logArea.setText("");
        new Thread(() -> {   
//            String path = System.getProperty("user.dir").replace("\\", "/");
//            String apkPath = apkFileEt.getText().replace("\\", "/");
//            String resPath = resEt.getText().replace("\\", "/");
//            String appName = nameEt.getText().replace("\\", "/");
//            String appPackage = packageNameEt.getText().replace("\\", "/");
//            String versionCode = versionCodeEt.getText();
//            String versionName = versionNameEt.getText();
//            String mIcon = mIconPath.replace("\\", "/");
//            String hIcon = hIconPath.replace("\\", "/");
//            String xhIcon = xhIconPath.replace("\\", "/");
//            String xxhIcon = xxhIconPath.replace("\\", "/");
//            String xxxhIcon = xxxhIconPath.replace("\\", "/");
//            String apktoolPath = path + "/apkSigned/apktool.jar";
//
//            if(StringUtil.isEmpty(apkPath)) {
//                showLogMessage("APK不能为空。");
//                return;
//            }
//            if(!new File(apkPath).exists()) {
//                showLogMessage("APK不存在。");
//                return;
//            }
//            
//            if(StringUtil.isEmpty(versionCode)) {
//                showLogMessage("版本号不能为空。");
//                return;
//            }
//            
//            if(StringUtil.isEmpty(versionName)) {
//                showLogMessage("版本名称不能为空。");
//                return;
//            }
//            
//            if(StringUtil.isEmpty(appName)) {
//                showLogMessage("应用包名不能为空。");
//                return;
//            }
//            
//            if(StringUtil.isEmpty(appPackage)) {
//                showLogMessage("应用名称不能为空。");
//                return;
//            }
//            
//            if(StringUtil.isEmpty(mIcon)) {
//                showLogMessage("mIcon不能为空。");
//                return;
//            }
//            if(!new File(mIcon).exists()) {
//                showLogMessage("mIcon不存在。");
//                return;
//            }
//            
//            if(StringUtil.isEmpty(hIcon)) {
//                showLogMessage("hIcon不能为空。");
//                return;
//            }
//            if(!new File(hIcon).exists()) {
//                showLogMessage("hIcon不存在。");
//                return;
//            }
//            
//            if(StringUtil.isEmpty(xxhIcon)) {
//                showLogMessage("xxhIcon不能为空。");
//                return;
//            }
//            if(!new File(xxhIcon).exists()) {
//                showLogMessage("xxhIcon不存在。");
//                return;
//            }
//            
//            if(StringUtil.isEmpty(xxxhIcon)) {
//                showLogMessage("xxxhIcon不能为空。");
//                return;
//            }
//            if(!new File(xxxhIcon).exists()) {
//                showLogMessage("xxxhIcon不存在。");
//                return;
//            }
//
//            /**
//             * 编译和签名的根目录
//             */
//            String toolDirPath = apktoolPath.substring(0, apktoolPath.lastIndexOf("/")+1);
//            //签名工具的目录
//            String signapkPath = toolDirPath + "signapk.jar";
//            String pemPath = toolDirPath + "cert.x509.pem";
//            String pk8Path = toolDirPath + "private.pk8";
//
//            //apk包的名称
//            String apkName = apkPath.substring(apkPath.lastIndexOf("/")+1, apkPath.lastIndexOf(".apk"));
//            Runtime run = Runtime.getRuntime();
//            try {
//                showLogMessage("正在解包...");
//                //解包命令
//                String openJarCode = "java -jar " + apktoolPath + " d -f -s " +apkPath;
//                Process p = run.exec(openJarCode, null, new File(toolDirPath));
//                p.waitFor();
//                showLogMessage("解包成功。");
//                
//                showLogMessage("正在修改AndroidManifest...");
//                ApkSignedUtil.updateAndroidMainifest(toolDirPath + apkName + "/AndroidManifest.xml", appPackage, versionCode, versionName);
//                showLogMessage("修改AndroidManifest成功。");
//                
//                showLogMessage("正在修改应用名称...");
//                ApkSignedUtil.updateAppName(toolDirPath + apkName + "/res/values/strings.xml", appName);
//                showLogMessage("修改应用名称成功");
//                
//                showLogMessage("正在修改应用图标...");
//                Files.copy(Paths.get(hIcon), Paths.get(toolDirPath + apkName + "/res/mipmap-hdpi-v4/ic_launcher.png"), StandardCopyOption.REPLACE_EXISTING);
//                Files.copy(Paths.get(mIcon), Paths.get(toolDirPath + apkName + "/res/mipmap-mdpi-v4/ic_launcher.png"), StandardCopyOption.REPLACE_EXISTING);
//                Files.copy(Paths.get(xhIcon), Paths.get(toolDirPath + apkName + "/res/mipmap-xhdpi-v4/ic_launcher.png"), StandardCopyOption.REPLACE_EXISTING);
//                Files.copy(Paths.get(xxhIcon), Paths.get(toolDirPath + apkName + "/res/mipmap-xxhdpi-v4/ic_launcher.png"), StandardCopyOption.REPLACE_EXISTING);
//                Files.copy(Paths.get(xxxhIcon), Paths.get(toolDirPath + apkName + "/res/mipmap-xxxhdpi-v4/ic_launcher.png"), StandardCopyOption.REPLACE_EXISTING);
//                showLogMessage("修改应用图标成功");
//                
//                if(StringUtil.isNotEmpty(resPath)) {
//                    showLogMessage("正在设置应用配置...");
//                    File sourceFile = new File(resPath);
//                    File targetFile = new File(toolDirPath + apkName + "/res/raw/res_decrypted.zip");
//                    if(!sourceFile.exists()) {
//                        showLogMessage("应用配置不存在，请检查路径！");
//                        return;
//                    }
//
//                    FileUtils.copyFile(sourceFile , targetFile);
//                    showLogMessage("设置应用配置成功");
//                }
//                
//                showLogMessage("正在重新打包...");
//
//                String packJarCode = "java -jar " + apktoolPath + " b " +apkName;
//                p = run.exec(packJarCode, null, new File(toolDirPath));
//                p.waitFor();
//                showLogMessage("重新打包成功。");
//                
//                showLogMessage("正在签名...");
//
//                String signedApkCode = "java -jar "+ signapkPath +" "+ pemPath +" "+ pk8Path +" "+ toolDirPath+apkName+"/dist/"+apkName+".apk" +" " +toolDirPath+apkName+"_new.apk";
//                p = run.exec(signedApkCode, null, new File(toolDirPath));
//                p.waitFor();
//                showLogMessage("签名成功。");
//                showLogMessage("生成apk："+ toolDirPath+apkName+"_new.apk");
//                
//                FileUtils.deleteDirectory(new File(toolDirPath + apkName));
//            } catch (IOException | DocumentException | InterruptedException e) {
//                showLogMessage(e.getMessage());
//            }
            
            String apkPath = apkFileEt.getText().replace("\\", "/");
            String resPath = resEt.getText().replace("\\", "/");
            String appName = nameEt.getText().replace("\\", "/");
            String appPackage = packageNameEt.getText().replace("\\", "/");
            String versionCode = versionCodeEt.getText();
            String versionName = versionNameEt.getText();
            String mIcon = mIconPath.replace("\\", "/");
            String hIcon = hIconPath.replace("\\", "/");
            String xhIcon = xhIconPath.replace("\\", "/");
            String xxhIcon = xxhIconPath.replace("\\", "/");
            String xxxhIcon = xxxhIconPath.replace("\\", "/");
            
            APKInfo apkInfo = new APKInfo(apkPath, appName, appPackage, versionCode, versionName, resPath, mIcon, hIcon, xhIcon, xxhIcon, xxxhIcon);
            APKSignatureService service = new APKSignatureService(logArea);
            service.signature(apkInfo);
         
        }).start();
    }//GEN-LAST:event_signedBtActionPerformed

    private void resEtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resEtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resEtActionPerformed

    private void resBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resBtActionPerformed
        resFileChoose.showOpenDialog(this);
    }//GEN-LAST:event_resBtActionPerformed

    private void resFileChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resFileChooseActionPerformed
        File file = resFileChoose.getSelectedFile();
        resEt.setText(file.getPath());
    }//GEN-LAST:event_resFileChooseActionPerformed

    private void showIconChoose() {
        iconChoose.showOpenDialog(this);
    }
    
    private void showLogMessage(String message) {
        logArea.append(message);
        logArea.append("\n");
    }
    
    private void setImageLabel(JLabel label, String filePath) {
        ImageIcon imageIcon = new javax.swing.ImageIcon(filePath);
        Image img = imageIcon.getImage();  
        img = img.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_DEFAULT);  
        imageIcon.setImage(img);  
        label.setIcon(imageIcon); 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }
    
    private String mIconPath = "";
    private String hIconPath = "";
    private String xhIconPath = "";
    private String xxhIconPath = "";
    private String xxxhIconPath = "";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apkFileBt;
    private javax.swing.JFileChooser apkFileChoose;
    private javax.swing.JTextField apkFileEt;
    private javax.swing.JLabel hIconIv;
    private javax.swing.JFileChooser iconChoose;
    private javax.swing.JLabel iconChooseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logArea;
    private javax.swing.JLabel mIconIv;
    private javax.swing.JTextField nameEt;
    private javax.swing.JTextField packageNameEt;
    private javax.swing.JButton resBt;
    private javax.swing.JTextField resEt;
    private javax.swing.JFileChooser resFileChoose;
    private javax.swing.JButton signedBt;
    private javax.swing.JTextField versionCodeEt;
    private javax.swing.JTextField versionNameEt;
    private javax.swing.JLabel xhIconIv;
    private javax.swing.JLabel xxhIconIv;
    private javax.swing.JLabel xxxhIconIv;
    // End of variables declaration//GEN-END:variables
}
